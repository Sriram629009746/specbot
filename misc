import plotly.graph_objects as go
import pandas as pd
import plotly.express as px
import random

# Generate sample data with 100 unique commands
num_commands = 100
commands = [f"cmd_{i}" for i in range(1, num_commands + 1)]
random.shuffle(commands)  # Shuffle to mix command types

data = {
    "command": [random.choice(commands) for _ in range(500)],  # 500 data points
    "start time": sorted(random.sample(range(1, 1000000, 10), 500)),  # Microsecond timestamps
    "end time": [t + random.randint(10, 500) for t in sorted(random.sample(range(1, 1000000, 10), 500))],
    "position": [random.randint(1, 32) for _ in range(500)],  # Positions in the queue
    "status": [random.choice(["success", "fail"]) for _ in range(500)],  # Success or Fail
    "other details": [f"info_{i}" for i in range(500)]  # Example metadata
}

df = pd.DataFrame(data)

# Sort by start time
df = df.sort_values(by="start time").reset_index(drop=True)

# Get a large enough set of unique colors
plotly_colors = px.colors.qualitative.Light24 + px.colors.qualitative.Alphabet + px.colors.qualitative.Dark24
num_plotly_colors = len(plotly_colors)

# If we have more commands than available colors, generate extra colors using a colorscale
if len(df["command"].unique()) > num_plotly_colors:
    extra_colors_needed = len(df["command"].unique()) - num_plotly_colors
    extra_colors = px.colors.sample_colorscale("rainbow", [i / extra_colors_needed for i in range(extra_colors_needed)])
    all_colors = plotly_colors + extra_colors
else:
    all_colors = plotly_colors

# Assign unique colors to commands
cmd_colors = {cmd: all_colors[i % len(all_colors)] for i, cmd in enumerate(df["command"].unique())}

# Create figure
fig = go.Figure()

# Add lines for each command occurrence
for _, row in df.iterrows():
    hover_text = (
        f"Command: {row['command']}<br>"
        f"Start Time: {row['start time']} µs<br>"
        f"End Time: {row['end time']} µs<br>"
        f"Time Taken: {row['end time'] - row['start time']} µs<br>"
        f"Status: {row['status']}<br>"
        f"Details: {row['other details']}"
    )
    
    fig.add_trace(go.Scatter(
        x=[row["start time"], row["end time"]],
        y=[row["position"], row["position"]],
        mode="lines",
        line=dict(width=2, color=cmd_colors[row["command"]]),
        legendgroup=row["command"],
        showlegend=False,  # Avoid duplicate legend entries
        hoverinfo="text",
        text=hover_text
    ))

# Add a single legend entry for each command
for cmd, color in cmd_colors.items():
    fig.add_trace(go.Scatter(
        x=[None],  # Empty trace for legend
        y=[None],
        mode="lines",
        line=dict(width=2, color=color),
        name=cmd,
        legendgroup=cmd
    ))

# Layout
fig.update_layout(
    height=1000,
    title="Command Execution Timeline with Hover Info",
    xaxis_title="Time (µs)",
    yaxis_title="Queue Position",
    xaxis=dict(
        tickmode="auto",
        dtick=1,  # Microsecond resolution
        range=[0,10000]
    ),
    yaxis=dict(
        tickmode="array",
        tickvals=sorted(df["position"].unique()),  # Show all used positions
        showgrid=True,
        zeroline=False,
        fixedrange=True
    ),
    legend=dict(title="Commands", traceorder="normal", bgcolor="rgba(255,255,255,0.8)")
)

# Show plot
fig.show()



### UPDATED
import plotly.graph_objects as go
import pandas as pd
import plotly.express as px
import random
from plotly.subplots import make_subplots

# Generate sample data with 100 unique commands
num_commands = 100
commands = [f"cmd_{i}" for i in range(1, num_commands + 1)]
random.shuffle(commands)  # Shuffle to mix command types

data = {
    "command": [random.choice(commands) for _ in range(500)],  # 500 data points
    "start time": sorted(random.sample(range(1, 1000000, 10), 500)),  # Microsecond timestamps
    "end time": [t + random.randint(10, 500) for t in sorted(random.sample(range(1, 1000000, 10), 500))],
    "position": [random.randint(1, 32) for _ in range(500)],  # Positions in the queue
    "status": [random.choice(["success", "fail"]) for _ in range(500)],  # Success or Fail
    "other details": [f"info_{i}" for i in range(500)]  # Example metadata
}

df = pd.DataFrame(data)

# Sort by start time
df = df.sort_values(by="start time").reset_index(drop=True)

# Get a large enough set of unique colors
plotly_colors = px.colors.qualitative.Light24 + px.colors.qualitative.Alphabet + px.colors.qualitative.Dark24
num_plotly_colors = len(plotly_colors)

# If we have more commands than available colors, generate extra colors using a colorscale
if len(df["command"].unique()) > num_plotly_colors:
    extra_colors_needed = len(df["command"].unique()) - num_plotly_colors
    extra_colors = px.colors.sample_colorscale("rainbow", [i / extra_colors_needed for i in range(extra_colors_needed)])
    all_colors = plotly_colors + extra_colors
else:
    all_colors = plotly_colors

# Assign unique colors to commands
cmd_colors = {cmd: all_colors[i % len(all_colors)] for i, cmd in enumerate(df["command"].unique())}

# Create figure with shared x-axis
fig = make_subplots(
    rows=2, cols=1,
    shared_xaxes=True,  # Ensures zooming/panning is synchronized
    subplot_titles=["Command Execution Timeline", "Number of Commands in Queue"]
)

# First Subplot: Command Execution Timeline
for _, row in df.iterrows():
    hover_text = (
        f"Command: {row['command']}<br>"
        f"Start Time: {row['start time']} µs<br>"
        f"End Time: {row['end time']} µs<br>"
        f"Time Taken: {row['end time'] - row['start time']} µs<br>"
        f"Status: {row['status']}<br>"
        f"Details: {row['other details']}"
    )
    
    fig.add_trace(go.Scatter(
        x=[row["start time"], row["end time"]],
        y=[row["position"], row["position"]],
        mode="lines",
        line=dict(width=2, color=cmd_colors[row["command"]]),
        legendgroup=row["command"],
        showlegend=False,  # Avoid duplicate legend entries
        hoverinfo="text",
        text=hover_text
    ), row=1, col=1)

# Add a single legend entry for each command
for cmd, color in cmd_colors.items():
    fig.add_trace(go.Scatter(
        x=[None],  # Empty trace for legend
        y=[None],
        mode="lines",
        line=dict(width=2, color=color),
        name=cmd,
        legendgroup=cmd
    ), row=1, col=1)

# Compute number of active commands in queue over time
events = []
for _, row in df.iterrows():
    events.append((row["start time"], +1, row["position"]))  # Command starts
    events.append((row["end time"], -1, row["position"]))    # Command ends

# Sort events by time (resolve start before end if same time)
events.sort()

# Track active positions
active_positions = set()
queue_times = []
queue_sizes = []

for time, change, pos in events:
    if change == +1:  # Command starts
        active_positions.add(pos)
    elif change == -1:  # Command ends
        active_positions.discard(pos)
    
    queue_times.append(time)
    queue_sizes.append(len(active_positions))  # Count active positions

# Second Subplot: Number of Commands in Queue
fig.add_trace(go.Scatter(
    x=queue_times,
    y=queue_sizes,
    mode="lines",
    name="Commands in Queue",
    line=dict(color="blue"),
    hoverinfo="x+y"
), row=2, col=1)

# Update layout for shared X-axis
fig.update_layout(
    height=1000,
    title="Command Execution Timeline & Queue Size",
    xaxis_title="Time (µs)",
    xaxis2_title="Time (µs)",  # Time displayed on both x-axes
    yaxis_title="Queue Position",
    yaxis2_title="Commands in Queue",
    xaxis=dict(
        tickmode="auto",
        dtick=1,  # Microsecond resolution
        range=[0, 50000]  # Set fixed X-axis range
    ),
    yaxis=dict(
        tickmode="array",
        tickvals=sorted(df["position"].unique()),  # Show all used positions
        showgrid=True,
        zeroline=False,
        fixedrange=True  # Fixed Y-axis for first subplot
    ),
    yaxis2=dict(
        showgrid=True,
        zeroline=False
    ),
    legend=dict(title="Commands", traceorder="normal", bgcolor="rgba(255,255,255,0.8)")
)

# Show plot
fig.show()


##OOP

import plotly.graph_objects as go
import pandas as pd
import plotly.express as px
import random
from plotly.subplots import make_subplots

class CommandQueuePlotter:
    def __init__(self, df):
        self.df = df
        self.fig = make_subplots(
            rows=2, cols=1, shared_xaxes=True, 
            vertical_spacing=0.1,
            subplot_titles=["Command Execution Timeline", "Number of Commands in Queue"]
        )
        self.cmd_colors = self.assign_colors()

    def assign_colors(self):
        """Assigns unique colors to each command."""
        plotly_colors = px.colors.qualitative.Light24 + px.colors.qualitative.Alphabet + px.colors.qualitative.Dark24
        num_plotly_colors = len(plotly_colors)

        unique_cmds = self.df["command"].unique()
        if len(unique_cmds) > num_plotly_colors:
            extra_colors = px.colors.sample_colorscale("rainbow", [i / len(unique_cmds) for i in range(len(unique_cmds))])
            all_colors = plotly_colors + extra_colors
        else:
            all_colors = plotly_colors

        return {cmd: all_colors[i % len(all_colors)] for i, cmd in enumerate(unique_cmds)}

    def add_command_timeline(self):
        """Adds the command execution timeline as the first subplot."""
        for _, row in self.df.iterrows():
            hover_text = (
                f"Command: {row['command']}<br>"
                f"Start Time: {row['start time']} µs<br>"
                f"End Time: {row['end time']} µs<br>"
                f"Time Taken: {row['end time'] - row['start time']} µs<br>"
                f"Status: {row['status']}<br>"
                f"Details: {row['other details']}"
            )

            self.fig.add_trace(go.Scatter(
                x=[row["start time"], row["end time"]],
                y=[row["position"], row["position"]],
                mode="lines",
                line=dict(width=2, color=self.cmd_colors[row["command"]]),
                legendgroup=row["command"],
                showlegend=False,  # Avoid duplicate legends
                hoverinfo="text",
                text=hover_text
            ), row=1, col=1)

        # Add one legend entry per command
        for cmd, color in self.cmd_colors.items():
            self.fig.add_trace(go.Scatter(
                x=[None],  # Empty trace for legend
                y=[None],
                mode="lines",
                line=dict(width=2, color=color),
                name=cmd,
                legendgroup=cmd
            ), row=1, col=1)

    def add_queue_size_plot(self):
        """Adds the queue size subplot, counting active commands at each microsecond."""
        time_series = sorted(set(self.df["start time"]).union(set(self.df["end time"])))
        queue_counts = {t: 0 for t in time_series}

        # Compute queue size at each timestamp
        active_cmds = 0
        for t in time_series:
            active_cmds += sum(self.df["start time"] == t)  # New cmds start
            active_cmds -= sum(self.df["end time"] == t)    # Cmds finish
            queue_counts[t] = max(0, active_cmds)  # Ensure no negatives

        self.fig.add_trace(go.Scatter(
            x=list(queue_counts.keys()),
            y=list(queue_counts.values()),
            mode="lines",
            line=dict(width=2, color="blue"),
            name="Commands in Queue"
        ), row=2, col=1)

    def configure_layout(self):
        """Sets up the layout and axis configurations."""
        self.fig.update_layout(
            title="Command Execution Timeline & Queue Size",
            height=1000,
            xaxis=dict(
                title="Time (µs)",
                range=[0, 50000],  # Initial range but zoomable
                showline=True,
                showgrid=True,
                rangeslider_visible=False,
                showticklabels=True
            ),
            xaxis2=dict(
                title="Time (µs)",  
                range=[0, 50000],  
                showline=True,
                showgrid=True,
                rangeslider_visible=False,
                showticklabels=True
            ),
            yaxis=dict(
                title="Queue Position",
                tickmode="array",
                tickvals=sorted(self.df["position"].unique()),  
                showgrid=True,
                zeroline=False,
                fixedrange=True  # Keeps Y-axis static
            ),
            yaxis2=dict(
                title="Commands in Queue",
                showgrid=True,
                zeroline=False
            ),
            legend=dict(title="Commands", traceorder="normal", bgcolor="rgba(255,255,255,0.8)")
        )

    def plot(self):
        """Generates the plot with subplots and displays it."""
        self.add_command_timeline()
        self.add_queue_size_plot()
        self.configure_layout()
        self.fig.show()


# ---- Sample Data ----
num_commands = 100
commands = [f"cmd_{i}" for i in range(1, num_commands + 1)]
random.shuffle(commands)

data = {
    "command": [random.choice(commands) for _ in range(500)],
    "start time": sorted(random.sample(range(1, 1000000, 10), 500)),
    "end time": [t + random.randint(10, 500) for t in sorted(random.sample(range(1, 1000000, 10), 500))],
    "position": [random.randint(1, 32) for _ in range(500)],
    "status": [random.choice(["success", "fail"]) for _ in range(500)],
    "other details": [f"info_{i}" for i in range(500)]
}

df = pd.DataFrame(data).sort_values(by="start time").reset_index(drop=True)

# ---- Create & Show Plot ----
plotter = CommandQueuePlotter(df)
plotter.plot()



### dist

import plotly.graph_objects as go
import pandas as pd
import numpy as np
from plotly.subplots import make_subplots

# Simulate realistic non-uniform command distribution
np.random.seed(42)
num_cmds = 50000  # Total number of commands
cmd_types = [f'CMD_{i}' for i in range(1, 101)]  # 100 unique command types

# Assign probabilities so some commands appear more frequently
cmd_probabilities = np.random.power(a=5, size=100)  # Skewed distribution
cmd_probabilities /= cmd_probabilities.sum()  # Normalize to sum to 1

# Generate command names based on weighted probabilities
cmd_names = np.random.choice(cmd_types, size=num_cmds, p=cmd_probabilities)

# Assign command types with distinct latency distributions for each type
cmd_categories = []
time_elapsed = []

for cmd in cmd_names:
    if np.random.rand() < 0.33:  # Assign 'read' type to ~33% of commands
        cmd_categories.append('read')
        time_elapsed.append(np.random.exponential(scale=40))  # Shorter latencies for read
    elif np.random.rand() < 0.66:  # Assign 'write' type to ~33% of commands
        cmd_categories.append('write')
        time_elapsed.append(np.random.exponential(scale=100))  # Longer latencies for write
    else:  # Assign 'admin' type to ~33% of commands
        cmd_categories.append('admin')
        time_elapsed.append(np.random.exponential(scale=70))  # Different latencies for admin

# Create DataFrame
df = pd.DataFrame({'Command': cmd_names, 'Command Type': cmd_categories, 'Time Elapsed': time_elapsed})

# Aggregate command counts and compute percentages
cmd_counts = df['Command'].value_counts().reset_index()
cmd_counts.columns = ['Command', 'Count']
cmd_counts['Percentage'] = (cmd_counts['Count'] / cmd_counts['Count'].sum()) * 100

# Compute latency statistics per command
stats = df.groupby('Command')['Time Elapsed'].agg(['mean', 'median', 'min', 'max']).reset_index()
cmd_counts = cmd_counts.merge(stats, on='Command')

# Create a 1x1 subplot figure
fig = make_subplots(rows=1, cols=1)

# Add the bar chart to the subplot
fig.add_trace(
    go.Bar(
        x=cmd_counts['Command'],
        y=cmd_counts['Percentage'],
        name="All Commands",
        hovertemplate="Command: %{x}<br>Mean: %{customdata[0]:.2f}<br>Median: %{customdata[1]:.2f}<br>Min: %{customdata[2]:.2f}<br>Max: %{customdata[3]:.2f}",
        customdata=cmd_counts[['mean', 'median', 'min', 'max']].values
    ),
    row=1, col=1
)

# Update layout
fig.update_layout(
    title="Command Distribution",
    xaxis_title='Command Name',
    yaxis_title='Count Percentage (%)',
)

fig.show()


### 

import plotly.graph_objects as go
import pandas as pd
import numpy as np

# Generate sample DataFrame with 10k data points
np.random.seed(42)
data = {
    'index': np.arange(10000),
    'cmd': np.random.choice(['read', 'write', 'erase', 'invalid'], 10000, p=[0.3, 0.3, 0.3, 0.1]),
    'start_address': np.random.randint(0, 100000, 10000),
    'length': np.random.randint(1, 100, 10000)
}
df = pd.DataFrame(data)

# Filter valid command types and define colors
valid_cmds = {'read': 'red', 'write': 'green', 'erase': 'blue'}
df = df[df['cmd'].isin(valid_cmds.keys())]

# Create traces
fig = go.Figure()
for cmd, color in valid_cmds.items():
    subset = df[df['cmd'] == cmd]
    fig.add_trace(go.Scatter(
        x=subset['index'],
        y=subset['start_address'],
        mode='markers',
        marker=dict(color=color, size=5, opacity=0.6),
        name=cmd
    ))

# Update layout
fig.update_layout(
    title="Command Start Address Visualization",
    xaxis_title="Index",
    yaxis_title="Start Address",
    showlegend=True,
    xaxis=dict(range=[0, 100]),  # Restrict visible range to first 100 points
    yaxis=dict(fixedrange=True)  # Restrict visible range to first 100 points
)

# Show plot
fig.show()


### Lines
import plotly.graph_objects as go
import pandas as pd
import numpy as np

# Generate sample data
num_points = 1000
np.random.seed(42)
index = np.arange(num_points)
cmds = np.random.choice(["read", "write", "erase"], num_points)
start_addresses = np.random.randint(0, 1000, num_points)
lengths = np.random.randint(10, 500, num_points)

data = {
    "index": index,
    "cmd": cmds,
    "start_address": start_addresses,
    "length": lengths
}
df = pd.DataFrame(data)

# Define color mapping for commands
cmd_colors = {"read": "red", "write": "green", "erase": "blue"}

# Create figure
fig = go.Figure()

# Add vertical lines for each valid command
for _, row in df.iterrows():
    fig.add_trace(go.Scattergl(
        x=[row["index"], row["index"]],
        y=[row["start_address"], row["start_address"] + row["length"]],
        mode="lines",
        line=dict(color=cmd_colors[row["cmd"]], width=2),
        name=row["cmd"],
        showlegend=False  # Avoid legend duplication
    ))

# Update layout with restricted x-axis window
fig.update_layout(
    title="Command Start Address Timeline",
    xaxis_title="Index",
    yaxis_title="Start Address",
    xaxis=dict(range=[0, 100]),
    yaxis=dict(fixedrange=True),
    showlegend=True
)

# Show plot
fig.show()

#pie
import pandas as pd
import plotly.graph_objects as go
import plotly.subplots as sp

# Generate sample data
data = {
    "index": range(15),
    "cmd": ["read", "write", "read", "write", "read", "write", "erase", "read", "write", "read",
            "write", "erase", "read", "write", "read"],
    "start_address": [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000,
                      11000, 12000, 13000, 14000, 15000],
    "length": [512, 1024, 512, 2048, 1024, 512, 4096, 512, 1024, 2048,
               512, 8192, 1024, 2048, 512]
}

df = pd.DataFrame(data)

# Filter read and write commands separately
df_read = df[df["cmd"] == "read"]
df_write = df[df["cmd"] == "write"]

# Create a subplot layout for side-by-side pie charts
fig = sp.make_subplots(rows=1, cols=2, subplot_titles=["Read Command Lengths", "Write Command Lengths"], specs=[[{"type": "domain"}, {"type": "domain"}]])

# Add Read Pie Chart
if not df_read.empty:
    read_lengths = df_read["length"].value_counts()
    fig.add_trace(go.Pie(
        labels=read_lengths.index,
        values=read_lengths.values,
        hole=0.3,
        hovertemplate="Length: %{label}<br>Percentage: %{percent}<br>Count: %{value}<extra></extra>"
    ), row=1, col=1)

# Add Write Pie Chart
if not df_write.empty:
    write_lengths = df_write["length"].value_counts()
    fig.add_trace(go.Pie(
        labels=write_lengths.index,
        values=write_lengths.values,
        hole=0.3,
        hovertemplate="Length: %{label}<br>Percentage: %{percent}<br>Count: %{value}<extra></extra>"
    ), row=1, col=2)

# Update layout
fig.update_layout(title_text="Read vs Write Command Lengths", showlegend=True)

# Show figure
fig.show()


# DASH
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from dash import Dash, dcc, html, Input, Output, State, ctx, no_update
import dash_bootstrap_components as dbc
# --- Subplot Support ---
from plotly.subplots import make_subplots


# --- Sample Data Generation ---
np.random.seed(42)
commands = ["read", "write", "trim", "verify"]

data = {
    "command": np.random.choice(commands, 500),
    "start time": sorted(np.random.randint(0, 50000, 500)),
    "duration": np.random.randint(10, 1000, 500),
    "position": np.random.randint(1, 33, 500),
    "status": np.random.choice(["success", "fail"], 500),
    "other details": [f"meta_{i}" for i in range(500)]
}
df = pd.DataFrame(data)
df["end time"] = df["start time"] + df["duration"]

# --- Color Map for 4 Commands ---
cmd_colors = {
    "read": "blue",
    "write": "green",
    "trim": "orange",
    "verify": "purple"
}

# --- Helper Function for Queue Depth ---
def compute_queue_depth(df, max_time):
    timeline = np.zeros(max_time + 1, dtype=int)
    for _, row in df.iterrows():
        timeline[row["start time"]:row["end time"]] += 1
    return pd.Series(timeline)

# --- Dash App and Layout ---
app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

'''
app.layout = html.Div([
    html.H2("Command Timeline & Queue Depth (4 Commands)"),
    dcc.Graph(id="cmd-plot"),
    dbc.Button("Recompute Stats (Pan)", id="recompute-btn", n_clicks=0, className="mb-2"),
    html.Div(id="stats-output", style={"whiteSpace": "pre-wrap", "fontFamily": "monospace"})
])
'''

# --- Plot Builder Function ---
def build_figure(df, x_range=None):
    max_time = int(df["end time"].max())
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True,
                        row_heights=[0.6, 0.4], vertical_spacing=0.05,
                        subplot_titles=("Command Timeline", "Queue Depth"))

    # Command Timeline
    for _, row in df.iterrows():
        hover_text = (
            f"Command: {row['command']}<br>"
            f"Start: {row['start time']} µs<br>"
            f"End: {row['end time']} µs<br>"
            f"Latency: {row['end time'] - row['start time']} µs<br>"
            f"Status: {row['status']}<br>"
            f"Details: {row['other details']}"
        )
        fig.add_trace(go.Scatter(
            x=[row["start time"], row["end time"]],
            y=[row["position"]] * 2,
            mode="lines",
            line=dict(color=cmd_colors[row["command"]], width=2),
            name=row["command"],
            legendgroup=row["command"],
            showlegend=False,
            hoverinfo="text",
            text=hover_text
        ), row=1, col=1)

    # Add one legend per command
    for cmd, color in cmd_colors.items():
        fig.add_trace(go.Scatter(
            x=[None], y=[None],
            mode="lines",
            line=dict(color=color, width=2),
            name=cmd,
            legendgroup=cmd
        ), row=1, col=1)

    # Queue Depth
    depth = compute_queue_depth(df, max_time)
    fig.add_trace(go.Scatter(
        x=depth.index,
        y=depth.values,
        mode="lines",
        name="Queue Depth",
        showlegend=False,
        line=dict(color="black")
    ), row=2, col=1)

    '''
    fig.update_layout(
        height=700,
        margin=dict(t=50, b=40),
        xaxis_range=x_range or [0, 5000],
        yaxis=dict(title="Queue Position", fixedrange=True),
        yaxis2=dict(title="Depth", fixedrange=True),
    )
    '''
    fig.update_layout(
        height=700,
        margin=dict(t=50, b=40),
        yaxis=dict(title="Queue Position", fixedrange=True),
        yaxis2=dict(title="Depth", fixedrange=True),
    )

    if x_range is not None:
        fig.update_xaxes(range=x_range)

    return fig


app.layout = html.Div([
    html.H2("Command Timeline & Queue Depth (4 Commands)"),
    dcc.Graph(
        id="cmd-plot",
        figure=build_figure(df),  # Renders once at startup
        config={"scrollZoom": True}
    ),
    dbc.Button("Recompute Stats (Pan)", id="recompute-btn", n_clicks=0, className="mb-2"),
    html.Div(id="stats-output", style={"whiteSpace": "pre-wrap", "fontFamily": "monospace"})
])


# --- Callback: Update on Zoom/Autoscale or Button Confirm ---
@app.callback(
    Output("stats-output", "children"),
    Input("cmd-plot", "relayoutData"),
    Input("recompute-btn", "n_clicks"),
)
def update_stats(relayout_data, n_clicks):
    triggered = ctx.triggered_id
    x_range = [0, 5000]

    # Determine x_range from relayoutData
    if relayout_data:
        if "xaxis.range[0]" in relayout_data:
            x_range = [relayout_data["xaxis.range[0]"], relayout_data["xaxis.range[1]"]]
        elif "xaxis.autorange" in relayout_data:
            x_range = [df["start time"].min(), df["end time"].max()]
        else:
            # Don't recompute for panning unless button clicked
            if triggered != "recompute-btn":
                return no_update

    # This line ensures stats recompute only for zoom/autoscale or button
    if triggered == "recompute-btn" or "xaxis.range[0]" in (relayout_data or {}) or "xaxis.autorange" in (relayout_data or {}):
        df_window = df[(df["start time"] <= x_range[1]) & (df["end time"] >= x_range[0])]

        if len(df_window) == 0:
            return "No commands in current view."

        stats = ""
        for cmd in df_window["command"].unique():
            subset = df_window[df_window["command"] == cmd]
            avg_latency = np.mean(subset["end time"] - subset["start time"])
            stats += f"{cmd:>6}: count={len(subset):<3}  avg latency={avg_latency:.1f} µs\n"
        return stats

    return no_update
'''
def update_plot(relayout_data, n_clicks, current_fig):
    triggered = ctx.triggered_id
    x_range = [0, 5000]  # Default

    if relayout_data:
        if "xaxis.range[0]" in relayout_data:
            x_range = [
                float(relayout_data["xaxis.range[0]"]),
                float(relayout_data["xaxis.range[1]"])
            ]
        elif "xaxis.autorange" in relayout_data:
            x_range = [df["start time"].min(), df["end time"].max()]
        else:
            # For pan or other interactions that don't explicitly update range
            return current_fig, no_update

    if triggered in ("cmd-plot", "recompute-btn", None):
        df_window = df[(df["start time"] <= x_range[1]) & (df["end time"] >= x_range[0])]
        fig = build_figure(df_window, x_range)

        if df_window.empty:
            stats = "No commands in current view."
        else:
            stats_lines = []
            for cmd in df_window["command"].unique():
                subset = df_window[df_window["command"] == cmd]
                avg_latency = np.mean(subset["end time"] - subset["start time"])
                stats_lines.append(f"{cmd:>6}: count={len(subset):<3}  avg latency={avg_latency:.1f} µs")
            stats = "\n".join(stats_lines)

        return fig, stats

    return current_fig, no_update
    
'''


#### PC
import pandas as pd
import plotly.graph_objects as go
import plotly.subplots as sp

# Generate sample data
data = {
    "index": range(15),
    "cmd": ["read", "write", "read", "write", "read", "write", "erase", "read", "write", "read",
            "write", "erase", "read", "write", "read"],
    "start_address": [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 
                      11000, 12000, 13000, 14000, 15000],
    "length": [512, 1024, 512, 2048, 1024, 512, 4096, 512, 1024, 2048,
               512, 8192, 1024, 2048, 512]
}

df = pd.DataFrame(data)

# Filter read and write commands
df_read = df[df["cmd"] == "read"]
df_write = df[df["cmd"] == "write"]

# Create subplot layout
fig = sp.make_subplots(
    rows=1, cols=2,
    specs=[[{"type": "domain"}, {"type": "domain"}]],
    subplot_titles=["Read Command Lengths", "Write Command Lengths"]
)

# Color palette
colors = ["#636EFA", "#EF553B", "#00CC96", "#AB63FA", "#FFA15A"]

# Read pie data
read_lengths = df_read["length"].value_counts()
read_labels = read_lengths.index.astype(str)
read_values = read_lengths.values
fig.add_trace(go.Pie(
    labels=read_labels,
    values=read_values,
    hole=0.3,
    marker=dict(colors=colors),
    hovertemplate="Length: %{label}<br>Percentage: %{percent}<br>Count: %{value}<extra></extra>",
    showlegend=False
), row=1, col=1)

# Write pie data
write_lengths = df_write["length"].value_counts()
write_labels = write_lengths.index.astype(str)
write_values = write_lengths.values
fig.add_trace(go.Pie(
    labels=write_labels,
    values=write_values,
    hole=0.3,
    marker=dict(colors=colors),
    hovertemplate="Length: %{label}<br>Percentage: %{percent}<br>Count: %{value}<extra></extra>",
    showlegend=False
), row=1, col=2)

# Move pie charts downward to add space between title and pie
fig.data[0].domain['y'] = [0.10, 0.90]  # read pie
fig.data[1].domain['y'] = [0.10, 0.80]  # write pie

# Custom legends
legend_y_start = 0.75  # lower to match new pie positions
spacing = 0.05

# Read legend
fig.add_annotation(text="<b>Read Chunk Size</b>", x=0.45, y=legend_y_start + 0.10, showarrow=False, xanchor="left")
for i, (label, value) in enumerate(zip(read_labels, read_values)):
    fig.add_shape(type="rect", x0=0.45, x1=0.47, y0=legend_y_start - i * spacing, y1=legend_y_start - i * spacing + 0.03,
                  fillcolor=colors[i % len(colors)], line=dict(width=0))
    fig.add_annotation(text=f"{label} ({value})", x=0.475, y=legend_y_start - i * spacing + 0.015,
                       showarrow=False, xanchor="left", yanchor="middle")

# Write legend
fig.add_annotation(text="<b>Write Chunk Size</b>", x=0.95, y=legend_y_start + 0.10, showarrow=False, xanchor="left")
for i, (label, value) in enumerate(zip(write_labels, write_values)):
    fig.add_shape(type="rect", x0=0.95, x1=0.97, y0=legend_y_start - i * spacing, y1=legend_y_start - i * spacing + 0.03,
                  fillcolor=colors[i % len(colors)], line=dict(width=0))
    fig.add_annotation(text=f"{label} ({value})", x=0.975, y=legend_y_start - i * spacing + 0.015,
                       showarrow=False, xanchor="left", yanchor="middle")

# Layout tweaks
fig.update_layout(
    #title_text="Read vs Write Command Lengths",
    margin=dict(l=40, r=40, t=80),
    height=500
)

fig.show()


# --- Run Server ---
if __name__ == "__main__":
    app.run(debug=True)



######## HTML
html.Div([
        html.Div(
            dcc.Graph(id="main-plot", figure=build_main_figure(df), config={"scrollZoom": True}),
            style={"flex": "1"}
        ),
        html.Div([
            html.Div(id="stats-output", style={
                "whiteSpace": "pre-wrap",
                "fontFamily": "monospace",
                "marginLeft": "0px",
                "marginTop": "500px"
            }),
        ], style={"width": "220px", "display": "flex", "flexDirection": "column", "alignItems": "left"})
    ], style={"display": "flex", "alignItems": "start"}),
    dbc.Button("Recompute Stats (Pan)", id="recompute-btn", n_clicks=0, className="mb-2", style={"marginTop": "10px"}),



### DIST
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Sample latency data in milliseconds (replace with your actual df)
np.random.seed(0)
df = pd.DataFrame({'latency': np.random.exponential(scale=300, size=10000)})  # in ms

# Parameters
bin_width_ms = 10
max_bin_edge = 1200  # up to 1.2s (1200ms)

# Create regular bins up to 1200ms
bins = np.arange(0, max_bin_edge, bin_width_ms)
labels = [f"{int(start)}-{int(start + bin_width_ms)}ms" for start in bins]

# Add a final bin for anything above 1200ms
bins = np.append(bins, np.inf)
labels.append(f"{max_bin_edge}+ms")

# Digitize latencies into bins
bin_indices = np.digitize(df['latency'], bins, right=False)
counts = np.bincount(bin_indices, minlength=len(labels)+1)[1:len(labels)+1]  # skip 0 index

# Create 1x1 subplot and add bar chart
fig = make_subplots(rows=1, cols=1)

fig.add_trace(
    go.Bar(
        x=labels,
        y=counts,
        marker_color='royalblue',
        name='Latency Counts'
    ),
    row=1, col=1
)

fig.update_layout(
    title='Latency Distribution (ms)',
    xaxis_title='Latency Bin',
    yaxis_title='Command Count',
    bargap=0.1,
    showlegend=False
)

fig.show()



## clear

@app.callback(
            [Output('latency-dashboard-content', 'style', allow_duplicate=True),
             Output('latency-main-plot', 'figure', allow_duplicate=True),
             Output('latency-address-map', 'figure', allow_duplicate=True),
             Output('latency-cmd-count-chart', 'figure', allow_duplicate=True),
             Output('latency-chunk-size-charts', 'figure', allow_duplicate=True),
             Output('latency-current-range-display', 'children', allow_duplicate=True),
             Output('latency-processing-status', 'children', allow_duplicate=True),
             Output('latency-stats-display', 'children', allow_duplicate=True),
             Output('latency-load-range-button', 'disabled', allow_duplicate=True),
             Output('latency-next-range-button', 'disabled', allow_duplicate=True)],
            Input('latency-upload-data', 'contents'),
            prevent_initial_call=True
        )
        def clear_on_upload(contents):

            print(f"in clear_on_upload")
            empty_fig = go.Figure()
            return (
                {'display': 'none'},
                #empty_fig, empty_fig, empty_fig, empty_fig,
                None,None,None,None,
                "", "", "",
                True, True
            )

